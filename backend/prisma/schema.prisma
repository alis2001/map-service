// prisma/schema.prisma
// Location: /backend/prisma/schema.prisma
// SIMPLIFIED - No Authentication Required

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Place {
  id              String   @id @default(cuid())
  googlePlaceId   String   @unique
  name            String
  address         String
  latitude        Float
  longitude       Float
  placeType       String   // 'cafe', 'bar', 'restaurant'
  rating          Float?
  priceLevel      Int?
  phoneNumber     String?
  website         String?
  openingHours    Json?
  photos          Json?
  businessStatus  String?  @default("OPERATIONAL")
  isActive        Boolean  @default(true)
  
  // ✅ NEW: Add review count field for popularity scoring
  userRatingsTotal Int?    @default(0)
  
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Add indexes for better performance including new popularity fields
  @@index([latitude, longitude])
  @@index([placeType])
  @@index([rating])
  @@index([userRatingsTotal]) // ✅ NEW: Index for review count queries
  @@index([rating, userRatingsTotal]) // ✅ NEW: Composite index for popularity queries
  @@map("places")
}

// User live locations for discovery
model UserLiveLocation {
  id        String   @id @default(cuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  isLive    Boolean  @default(true)
  lastSeen  DateTime @default(now())
  shareRadius Int    @default(1000) // meters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_live_locations")
}

// Meetup invites between users
model MeetupInvite {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String
  placeId     String?
  placeName   String?
  placeAddress String?
  message     String?
  status      InviteStatus @default(PENDING)
  meetupTime  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("meetup_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}

model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cache_entries")
}